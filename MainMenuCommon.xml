<?xml version="1.0" encoding="UTF-8"?>
<!-- $Id: MainMenuCommon.xml 1129 2014-12-23 15:52:19Z kik $ -->

<mainMenu>
  <!-- menuDocument can only contain 1 menu element, whose id is 
         implicitly "root_menu"
      -->
    <menu>
        <!-- Set external editor -->

        <addScriptItem id="set_external_editor">
        <label>Set External Expressions Editor</label>
        <parent>preferences_submenu</parent>
        <insertAfter>h.prefs_misc</insertAfter>
        <scriptCode><![CDATA[
from HoudiniExprEditor import ParmWatcher
reload(ParmWatcher)
ParmWatcher.set_external_editor()
        ]]></scriptCode>
        </addScriptItem>

        <!-- Open session module source watcher -->

        <addScriptItem id="external_python_source_editor">
        <label>External Python Source Editor</label>
        <parent>windows_menu</parent>
        <insertAfter>h.python_source_editor</insertAfter>
        <context>
            <expression><![CDATA[
try:
    from HoudiniExprEditor import ParmWatcher
    return True
except Exception as e:
    return False
            ]]></expression>
        </context>
        <scriptCode><![CDATA[
from HoudiniExprEditor import ParmWatcher
reload(ParmWatcher)
ParmWatcher.add_watcher("__temp__python_source_editor", type_="__temp__python_source_editor")
        ]]></scriptCode>
        </addScriptItem>

    </menu>

    <menuBar>
        <subMenu id="crater_menu">
            <label>Crater</label>
            <insertBefore>help_menu</insertBefore>

            <titleItem>
                <label>Tools</label>
            </titleItem>

            <scriptItem id="pw_MultiScriptEditor">
                <label>Script Editor</label>
                <scriptCode><![CDATA[
import pw_multiScriptEditor
reload(pw_multiScriptEditor)
pw_multiScriptEditor.showHoudini(name="Multi Script Editor", floating=True, size=(1200, 800))
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="cr_rootpanel">
                <label>Root Panel</label>
                <scriptCode><![CDATA[
from cs_devutils import unload_packages
unload_packages(packages=['cr_rootpanel'])
import cr_rootpanel
cr_rootpanel.show()
                ]]></scriptCode>
            </scriptItem>

            <separatorItem />

            <scriptItem id="crater_playblast">
                <label>Playblast</label>
                <scriptCode><![CDATA[
import os
COMMON_CONFIG_ROOT = os.environ["COMMON_CONFIG_ROOT"]
HOUDINI_CONFIG_ROOT = os.environ["HOUDINI_CONFIG_ROOT"]
execfile(os.path.join(COMMON_CONFIG_ROOT, "pipeline", "legacy_pipeline", "pipeline_tools.py"))
scene_root=Scene_root()
execfile(os.path.join(COMMON_CONFIG_ROOT, "pipeline", "legacy_pipeline", "playblast_tool.py"))
playblastCrater_WIN()
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="crater_playblast_on_farm">
                <label>Playblast on Farm</label>
                <scriptCode><![CDATA[
import os
COMMON_CONFIG_ROOT = os.environ["COMMON_CONFIG_ROOT"]
HOUDINI_CONFIG_ROOT = os.environ["HOUDINI_CONFIG_ROOT"]
execfile(os.path.join(HOUDINI_CONFIG_ROOT, "scripts", "playblast_over_deadline_submission.py"))
                ]]></scriptCode>
            </scriptItem>

            <!-- Arnold -->

            <subMenu id="cr_arnold_submenu">
                <label>Arnold</label>

                <scriptItem id="create_light_aims">
                    <label>Create Light Aims</label>
                    <scriptCode><![CDATA[
from cr_light_tools import cr_light_tools
reload(cr_light_tools)
cr_light_tools.create_aims(20)
                    ]]></scriptCode>
                </scriptItem>

                <scriptItem id="ak_htoa_prepare_separate_aovs">
                    <label>Prepare Separate AOV Paths</label>
                    <scriptCode><![CDATA[
from produtils import ak_htoa_prepare_separate_aovs
reload(ak_htoa_prepare_separate_aovs)
ak_htoa_prepare_separate_aovs.main()
                    ]]></scriptCode>
                </scriptItem>

                <scriptItem id="ak_htoa_prepare_lightgroup_aovs">
                    <label>Prepare Light Group AOVs</label>
                    <scriptCode><![CDATA[
from produtils import ak_htoa_prepare_lightgroup_aovs
reload(ak_htoa_prepare_lightgroup_aovs)
ak_htoa_prepare_lightgroup_aovs.main()
                    ]]></scriptCode>
                </scriptItem>

            </subMenu>

            <!-- Render -->

            <subMenu id="cr_render_submenu">
                <label>Render</label>

                <scriptItem id="ak_houdini_create_default_aovs">
                    <label>Create Default AOVs</label>
                    <scriptCode><![CDATA[
from produtils import ak_houdini_create_aovs
reload(ak_houdini_create_aovs)
ak_houdini_create_aovs.main()
                    ]]></scriptCode>
                </scriptItem>

                <scriptItem id="ak_houdini_additional_aovs">
                    <label>Create Additional AOVs</label>
                    <scriptCode><![CDATA[
from produtils import ak_houdini_create_aovs
reload(ak_houdini_create_aovs)
ak_houdini_create_aovs.main(additional=True)
                    ]]></scriptCode>
                </scriptItem>

            </subMenu>

            <!-- PDG -->

            <subMenu id="cr_pdg_submenu">
                <label>PDG</label>
            
                <scriptItem id="ak_pdg_prepare_deadlinescheduler">
                    <label>Prepare Deadline Scheduler</label>
                    <scriptCode><![CDATA[
from produtils import ak_pdg_prepare_deadlinescheduler
reload(ak_pdg_prepare_deadlinescheduler)
ak_pdg_prepare_deadlinescheduler.main()
                    ]]></scriptCode>
                </scriptItem>
            
                <scriptItem id="ak_pdg_prepare_serverbegin">
                    <label>Prepare Server Begin</label>
                    <scriptCode><![CDATA[
from produtils import ak_pdg_prepare_serverbegin
reload(ak_pdg_prepare_serverbegin)
ak_pdg_prepare_serverbegin.main()
                    ]]></scriptCode>
                </scriptItem>

            </subMenu>

            <!-- Shotgun -->

            <subMenu id="cr_shotgun_submenu">
                <label>Shotgun</label>
            
                <scriptItem id="convert_to_regular_arnold_nodes">
                    <label>Arnold ROP: Shotgun --> Regular</label>
                    <scriptCode><![CDATA[
from shotgun_utils import sg_utils
reload(sg_utils)
sg_utils.convert_to_regular_arnold_nodes()
                    ]]></scriptCode>
                </scriptItem>

                <scriptItem id="convert_back_to_tk_arnold_nodes">
                    <label>Arnold ROP: Regular --> Shotgun</label>
                    <scriptCode><![CDATA[
from shotgun_utils import sg_utils
reload(sg_utils)
sg_utils.convert_back_to_tk_arnold_nodes()
                    ]]></scriptCode>
                </scriptItem>

                <separatorItem />

                <scriptItem id="convert_to_regular_mantra_nodes">
                    <label>Mantra ROP: Shotgun --> Regular</label>
                    <scriptCode><![CDATA[
from shotgun_utils import sg_utils
reload(sg_utils)
sg_utils.convert_to_regular_mantra_nodes()
                    ]]></scriptCode>
                </scriptItem>

                <scriptItem id="convert_back_to_tk_mantra_nodes">
                    <label>Mantra ROP: Regular --> Shotgun</label>
                    <scriptCode><![CDATA[
from shotgun_utils import sg_utils
reload(sg_utils)
sg_utils.convert_back_to_tk_mantra_nodes()
                    ]]></scriptCode>
                </scriptItem>

                <separatorItem />

                <scriptItem id="reload_shotgun_engine">
                    <label>Reload Shotgun</label>
                    <scriptCode><![CDATA[
from shotgun_utils import sg_utils
reload(sg_utils)
sg_utils.reload_engine()
                    ]]></scriptCode>
                </scriptItem>

            </subMenu>

            <titleItem>
                <label>Project</label>
            </titleItem>

            <subMenu id="crater_project_tools_submenu">
                <label>Project Tools</label>
                <scriptMenuStripDynamic id="crater_project_tools_strip">
                    <contentsScriptCode><![CDATA[
import os
import hou
import yaml
from legacy_pipeline import pipeline_tools
scene_info = pipeline_tools.parse_info_from_path(hou.hipFile.name())
menu_items = list()
if scene_info.get("project"):
    project = scene_info["project"]
    menu_config_file = os.path.join(os.environ["HOUDINI_CONFIG_ROOT"], "python", "cr_startup", "projects", project, "project_tools", "config.yaml")
    if os.path.isfile(menu_config_file):
        with open(menu_config_file, "r") as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        for item in config["items"]:
            menu_items.append(item["token"])
            menu_items.append(item["label"])
return menu_items
                    ]]></contentsScriptCode>
                    <scriptCode><![CDATA[
import os
import yaml
import traceback
from legacy_pipeline import pipeline_tools
scene_info = pipeline_tools.parse_info_from_path(hou.hipFile.name())
if scene_info["project"]:
    project = scene_info["project"]
    menu_config_file = os.path.join(os.environ["HOUDINI_CONFIG_ROOT"], "python", "cr_startup", "projects", project, "project_tools", "config.yaml")
    if os.path.isfile(menu_config_file):
        with open(menu_config_file, "r") as f:
            config = yaml.load(f, Loader=yaml.FullLoader)
        for item in config["items"]:
            if item["token"] == kwargs["selectedtoken"]:
                try:
                    exec(item["command"])
                except Exception:
                    print(traceback.format_exc())
                    ]]></scriptCode>
                </scriptMenuStripDynamic>
            </subMenu>

            <titleItem>
                <label>Pipeline</label>
            </titleItem>

            <scriptItem id="cr_documentation">
                <label>Documentation</label>
                <scriptCode><![CDATA[
import webbrowser
webbrowser.open('https://docs.crater.studio/dashboard')
                ]]></scriptCode>
            </scriptItem>

            <scriptItem id="cr_about">
                <label>About</label>
                <scriptCode><![CDATA[
from cs_devutils import unload_packages
unload_packages(packages=['cr_about'])
import cr_about
cr_about.show()
                ]]></scriptCode>
            </scriptItem>

        </subMenu>
    </menuBar>
</mainMenu>
